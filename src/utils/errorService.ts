/**
 * Error Service - X·ª≠ l√Ω v√† logging l·ªói m·ªôt c√°ch nh·∫•t qu√°n
 */

// ƒê·ªãnh nghƒ©a c√°c lo·∫°i l·ªói kh√°c nhau
export enum ErrorType {
  API = 'API_ERROR',
  VALIDATION = 'VALIDATION_ERROR',
  AUTHENTICATION = 'AUTH_ERROR',
  NETWORK = 'NETWORK_ERROR',
  UNKNOWN = 'UNKNOWN_ERROR',
}

// Interface m√¥ t·∫£ c·∫•u tr√∫c c·ªßa AppError
export interface AppError {
  type: ErrorType;
  message: string;
  originalError?: any;
  timestamp: Date;
  context?: Record<string, any>;
}

// T√πy ch·ªçn logging l·ªói
interface LogOptions {
  silent?: boolean;
  includeStackTrace?: boolean;
  additionalContext?: Record<string, any>;
}

const defaultLogOptions: LogOptions = {
  silent: false,
  includeStackTrace: true,
  additionalContext: {},
};

/**
 * T·∫°o v√† format m·ªôt ƒë·ªëi t∆∞·ª£ng AppError
 */
export function createError(
  type: ErrorType,
  message: string,
  originalError?: any,
  context?: Record<string, any>
): AppError {
  return {
    type,
    message,
    originalError,
    timestamp: new Date(),
    context,
  };
}

/**
 * Ph√¢n lo·∫°i l·ªói d·ª±a tr√™n ƒë·ªëi t∆∞·ª£ng l·ªói g·ªëc
 */
export function classifyError(error: any): ErrorType {
  if (error?.name === 'TypeError' && error.message?.includes('Network')) {
    return ErrorType.NETWORK;
  }
  
  if (error?.response?.status === 401 || error?.status === 401) {
    return ErrorType.AUTHENTICATION;
  }
  
  if (error?.response?.status === 400 || error?.status === 400) {
    return ErrorType.VALIDATION;
  }
  
  if (error?.response || error?.request) {
    return ErrorType.API;
  }
  
  return ErrorType.UNKNOWN;
}

/**
 * Log l·ªói ra console v·ªõi format r√µ r√†ng
 */
export function logError(error: AppError, options: LogOptions = {}): void {
  const opts = { ...defaultLogOptions, ...options };
  if (opts.silent) return;
  
  const timestamp = error.timestamp.toISOString();
  const context = { ...(error.context || {}), ...(opts.additionalContext || {}) };
  
  // T·∫°o nh√≥m log cho l·ªói
  console.group(`üõë [${error.type}] ${timestamp}`);
  console.error(`üìå Message: ${error.message}`);
  
  if (Object.keys(context).length > 0) {
    console.log('üìä Context:', context);
  }
  
  if (error.originalError && opts.includeStackTrace) {
    console.error('üîç Original Error:', error.originalError);
    if (error.originalError.stack) {
      console.log('üìö Stack:', error.originalError.stack);
    }
  }
  
  console.groupEnd();
}

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ x·ª≠ l√Ω l·ªói t·ª´ API, ph√¢n lo·∫°i v√† log
 */
export function handleApiError(error: any, customMessage?: string, context?: Record<string, any>): AppError {
  const errorType = classifyError(error);
  
  let message = customMessage || 'ƒê√£ x·∫£y ra l·ªói khi g·ªçi API';
  if (errorType === ErrorType.NETWORK) {
    message = customMessage || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.';
  } else if (errorType === ErrorType.AUTHENTICATION) {
    message = customMessage || 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.';
  }
  
  const appError = createError(errorType, message, error, context);
  logError(appError);
  
  return appError;
}

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ x·ª≠ l√Ω l·ªói validation
 */
export function handleValidationError(error: any, customMessage?: string, context?: Record<string, any>): AppError {
  const appError = createError(
    ErrorType.VALIDATION,
    customMessage || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
    error,
    context
  );
  logError(appError);
  
  return appError;
}

export default {
  createError,
  classifyError,
  logError,
  handleApiError,
  handleValidationError,
  ErrorType,
}; 